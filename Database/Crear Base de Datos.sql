-- MySQL Script generated by MySQL Workbench
-- Fri Aug 19 18:11:03 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema infinite_knowledge
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `infinite_knowledge` ;

-- -----------------------------------------------------
-- Schema infinite_knowledge
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `infinite_knowledge` DEFAULT CHARACTER SET utf8 ;
USE `infinite_knowledge` ;

-- -----------------------------------------------------
-- Table `infinite_knowledge`.`genero`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`genero` (
  `genero_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`genero_id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idx_genero_nombre` ON `infinite_knowledge`.`genero` (`nombre` ASC);


-- -----------------------------------------------------
-- Table `infinite_knowledge`.`estado_aprobacion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`estado_aprobacion` (
  `estado_aprobacion_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`estado_aprobacion_id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idx_estado_aprobacion_nombre` ON `infinite_knowledge`.`estado_aprobacion` (`nombre` ASC);


-- -----------------------------------------------------
-- Table `infinite_knowledge`.`grado_academico`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`grado_academico` (
  `grado_academico_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`grado_academico_id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idx_grado_academico_nombre` ON `infinite_knowledge`.`grado_academico` (`nombre` ASC);


-- -----------------------------------------------------
-- Table `infinite_knowledge`.`dificultad_curso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`dificultad_curso` (
  `dificultad_curso_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`dificultad_curso_id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idx_dificultad_curso_nombre` ON `infinite_knowledge`.`dificultad_curso` (`nombre` ASC);


-- -----------------------------------------------------
-- Table `infinite_knowledge`.`enfoque_curso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`enfoque_curso` (
  `enfoque_curso_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`enfoque_curso_id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idx_enfoque_curso_nombre` ON `infinite_knowledge`.`enfoque_curso` (`nombre` ASC);


-- -----------------------------------------------------
-- Table `infinite_knowledge`.`especialidad_academica`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`especialidad_academica` (
  `especialidad_academica_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`especialidad_academica_id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idx_especialidad_academica_nombre` ON `infinite_knowledge`.`especialidad_academica` (`nombre` ASC);


-- -----------------------------------------------------
-- Table `infinite_knowledge`.`nivel_academico`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`nivel_academico` (
  `nivel_academico_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`nivel_academico_id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idx_nivel_academico_nombre` ON `infinite_knowledge`.`nivel_academico` (`nombre` ASC);


-- -----------------------------------------------------
-- Table `infinite_knowledge`.`director_academico`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`director_academico` (
  `director_academico_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `dni` CHAR(8) NOT NULL,
  `nombre` VARCHAR(50) NOT NULL,
  `apellido_paterno` VARCHAR(50) NOT NULL,
  `apellido_materno` VARCHAR(50) NOT NULL,
  `fecha_nacimiento` DATE NOT NULL,
  `anios_labor` TINYINT UNSIGNED NOT NULL,
  `genero_id` INT UNSIGNED NOT NULL,
  `numero_telefonico` CHAR(9) NOT NULL,
  `grado_academico_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`director_academico_id`),
  CONSTRAINT `fk_director_academico_genero_id`
    FOREIGN KEY (`genero_id`)
    REFERENCES `infinite_knowledge`.`genero` (`genero_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_director_academico_grado_academico_id`
    FOREIGN KEY (`grado_academico_id`)
    REFERENCES `infinite_knowledge`.`grado_academico` (`grado_academico_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idx_director_academico_dni` ON `infinite_knowledge`.`director_academico` (`dni` ASC);

CREATE UNIQUE INDEX `idx_director_academico_numero_telefonico` ON `infinite_knowledge`.`director_academico` (`numero_telefonico` ASC);

CREATE INDEX `fk_director_academico_genero_id_idx` ON `infinite_knowledge`.`director_academico` (`genero_id` ASC);

CREATE INDEX `fk_director_academico_grado_academico_id_idx` ON `infinite_knowledge`.`director_academico` (`grado_academico_id` ASC);


-- -----------------------------------------------------
-- Table `infinite_knowledge`.`auxiliar_academico`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`auxiliar_academico` (
  `auxiliar_academico_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `dni` CHAR(8) NOT NULL,
  `nombre` VARCHAR(50) NOT NULL,
  `apellido_paterno` VARCHAR(50) NOT NULL,
  `apellido_materno` VARCHAR(50) NOT NULL,
  `fecha_nacimiento` DATE NOT NULL,
  `n_docentes_a_cargo` TINYINT UNSIGNED NOT NULL,
  `genero_id` INT UNSIGNED NOT NULL,
  `numero_telefonico` CHAR(9) NOT NULL,
  `grado_academico_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`auxiliar_academico_id`),
  CONSTRAINT `fk_auxiliar_academico_genero_id`
    FOREIGN KEY (`genero_id`)
    REFERENCES `infinite_knowledge`.`genero` (`genero_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_auxiliar_academico_grado_academico_id`
    FOREIGN KEY (`grado_academico_id`)
    REFERENCES `infinite_knowledge`.`grado_academico` (`grado_academico_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idx_auxiliar_academico_dni` ON `infinite_knowledge`.`auxiliar_academico` (`dni` ASC);

CREATE UNIQUE INDEX `idx_auxiliar_academico_numero_telefonico` ON `infinite_knowledge`.`auxiliar_academico` (`numero_telefonico` ASC);

CREATE INDEX `fk_auxiliar_academico_genero_id_idx` ON `infinite_knowledge`.`auxiliar_academico` (`genero_id` ASC);

CREATE INDEX `fk_auxiliar_academico_grado_academico_id_idx` ON `infinite_knowledge`.`auxiliar_academico` (`grado_academico_id` ASC);


-- -----------------------------------------------------
-- Table `infinite_knowledge`.`docente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`docente` (
  `docente_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `dni` CHAR(8) NOT NULL,
  `nombre` VARCHAR(50) NOT NULL,
  `apellido_paterno` VARCHAR(50) NOT NULL,
  `apellido_materno` VARCHAR(50) NOT NULL,
  `fecha_nacimiento` DATE NOT NULL,
  `genero_id` INT UNSIGNED NOT NULL,
  `numero_telefonico` CHAR(9) NOT NULL,
  `grado_academico_id` INT UNSIGNED NOT NULL,
  `especialidad_academica_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`docente_id`),
  CONSTRAINT `fk_docente_genero_id`
    FOREIGN KEY (`genero_id`)
    REFERENCES `infinite_knowledge`.`genero` (`genero_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_grado_academico_id`
    FOREIGN KEY (`grado_academico_id`)
    REFERENCES `infinite_knowledge`.`grado_academico` (`grado_academico_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_especialidad_academica_id`
    FOREIGN KEY (`especialidad_academica_id`)
    REFERENCES `infinite_knowledge`.`especialidad_academica` (`especialidad_academica_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idx_docente_dni` ON `infinite_knowledge`.`docente` (`dni` ASC);

CREATE UNIQUE INDEX `idx_docente_numero_telefonico` ON `infinite_knowledge`.`docente` (`numero_telefonico` ASC);

CREATE INDEX `fk_docente_genero_id_idx` ON `infinite_knowledge`.`docente` (`genero_id` ASC);

CREATE INDEX `fk_grado_academico_id_idx` ON `infinite_knowledge`.`docente` (`grado_academico_id` ASC);

CREATE INDEX `fk_especialidad_academica_id_idx` ON `infinite_knowledge`.`docente` (`especialidad_academica_id` ASC);


-- -----------------------------------------------------
-- Table `infinite_knowledge`.`estudiante`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`estudiante` (
  `estudiante_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `dni` CHAR(8) NOT NULL,
  `nombre` VARCHAR(50) NOT NULL,
  `apellido_paterno` VARCHAR(50) NOT NULL,
  `apellido_materno` VARCHAR(50) NOT NULL,
  `fecha_nacimiento` DATE NOT NULL,
  `genero_id` INT UNSIGNED NOT NULL,
  `numero_telefonico` CHAR(9) NOT NULL,
  PRIMARY KEY (`estudiante_id`),
  CONSTRAINT `fk_estudiante_genero_id`
    FOREIGN KEY (`genero_id`)
    REFERENCES `infinite_knowledge`.`genero` (`genero_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idx_estudiante_dni` ON `infinite_knowledge`.`estudiante` (`dni` ASC);

CREATE UNIQUE INDEX `idx_estudiante_numero_telefonico` ON `infinite_knowledge`.`estudiante` (`numero_telefonico` ASC);


-- -----------------------------------------------------
-- Table `infinite_knowledge`.`curso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`curso` (
  `curso_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `n_horas` TINYINT UNSIGNED NOT NULL,
  `dificultad_curso_id` INT UNSIGNED NOT NULL,
  `enfoque_curso_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`curso_id`),
  CONSTRAINT `fk_curso_dificultad_curso_id`
    FOREIGN KEY (`dificultad_curso_id`)
    REFERENCES `infinite_knowledge`.`dificultad_curso` (`dificultad_curso_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_curso_enfoque_curso_id`
    FOREIGN KEY (`enfoque_curso_id`)
    REFERENCES `infinite_knowledge`.`enfoque_curso` (`enfoque_curso_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idx_curso_nombre` ON `infinite_knowledge`.`curso` (`nombre` ASC);

CREATE INDEX `fk_curso_dificultad_curso_id_idx` ON `infinite_knowledge`.`curso` (`dificultad_curso_id` ASC);

CREATE INDEX `fk_curso_enfoque_curso_id_idx` ON `infinite_knowledge`.`curso` (`enfoque_curso_id` ASC);


-- -----------------------------------------------------
-- Table `infinite_knowledge`.`salon_clases`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`salon_clases` (
  `salon_clases_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `grado` TINYINT UNSIGNED NOT NULL,
  `seccion` VARCHAR(2) NOT NULL,
  `nivel_academico_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`salon_clases_id`),
  CONSTRAINT `fk_nivel_academico_id`
    FOREIGN KEY (`nivel_academico_id`)
    REFERENCES `infinite_knowledge`.`nivel_academico` (`nivel_academico_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_nivel_academico_id_idx` ON `infinite_knowledge`.`salon_clases` (`nivel_academico_id` ASC);


-- -----------------------------------------------------
-- Table `infinite_knowledge`.`registro_calificaciones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`registro_calificaciones` (
  `docente_id` INT UNSIGNED NOT NULL,
  `estudiante_id` INT UNSIGNED NOT NULL,
  `salon_clases_id` INT UNSIGNED NOT NULL,
  `curso_id` INT UNSIGNED NOT NULL,
  `estado_aprobacion_id` INT UNSIGNED NOT NULL,
  `calif1` TINYINT UNSIGNED NULL,
  `calif2` TINYINT UNSIGNED NULL,
  `calif3` TINYINT UNSIGNED NULL,
  `promedio_final` TINYINT UNSIGNED NULL,
  `fecha_emision` DATE NULL,
  PRIMARY KEY (`docente_id`, `salon_clases_id`, `estudiante_id`, `curso_id`, `estado_aprobacion_id`),
  CONSTRAINT `fk_regisrtro_calificaciones_estado_aprobacion_id`
    FOREIGN KEY (`estado_aprobacion_id`)
    REFERENCES `infinite_knowledge`.`estado_aprobacion` (`estado_aprobacion_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_registro_calificaciones_docente_id`
    FOREIGN KEY (`docente_id`)
    REFERENCES `infinite_knowledge`.`docente` (`docente_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_registro_calificaciones_estudiante_id`
    FOREIGN KEY (`estudiante_id`)
    REFERENCES `infinite_knowledge`.`estudiante` (`estudiante_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_registro_calificaciones_salon_clases_id`
    FOREIGN KEY (`salon_clases_id`)
    REFERENCES `infinite_knowledge`.`salon_clases` (`salon_clases_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_registro_calificaciones_curso_id`
    FOREIGN KEY (`curso_id`)
    REFERENCES `infinite_knowledge`.`curso` (`curso_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_registro_calificaciones_estado_aprobacion_id_idx` ON `infinite_knowledge`.`registro_calificaciones` (`estado_aprobacion_id` ASC);

CREATE INDEX `fk_registro_calificaciones_estudiante_id_idx` ON `infinite_knowledge`.`registro_calificaciones` (`estudiante_id` ASC);

CREATE INDEX `fk_registro_calificaciones_salon_clases_id_idx` ON `infinite_knowledge`.`registro_calificaciones` (`salon_clases_id` ASC);

CREATE INDEX `fk_registro_calificaciones_curso_id_idx` ON `infinite_knowledge`.`registro_calificaciones` (`curso_id` ASC);


-- -----------------------------------------------------
-- Table `infinite_knowledge`.`registro_asistencias`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`registro_asistencias` (
  `docente_id` INT UNSIGNED NOT NULL,
  `estudiante_id` INT UNSIGNED NOT NULL,
  `salon_clases_id` INT UNSIGNED NOT NULL,
  `curso_id` INT UNSIGNED NOT NULL,
  `n_asistencias_realizadas` SMALLINT UNSIGNED NULL,
  `n_faltas_realizadas` SMALLINT UNSIGNED NULL,
  `n_justificaciones_realizadas` SMALLINT UNSIGNED NULL,
  `n_total_asistencias` SMALLINT UNSIGNED NULL,
  `fecha_emision` DATE NULL,
  PRIMARY KEY (`docente_id`, `estudiante_id`, `salon_clases_id`, `curso_id`),
  CONSTRAINT `fk_registro_asistencias_docente_id`
    FOREIGN KEY (`docente_id`)
    REFERENCES `infinite_knowledge`.`docente` (`docente_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_registro_asistencias_estudiante_id`
    FOREIGN KEY (`estudiante_id`)
    REFERENCES `infinite_knowledge`.`estudiante` (`estudiante_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_registro_asistencias_salon_clases_id`
    FOREIGN KEY (`salon_clases_id`)
    REFERENCES `infinite_knowledge`.`salon_clases` (`salon_clases_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_registro_asistencias_curso_id`
    FOREIGN KEY (`curso_id`)
    REFERENCES `infinite_knowledge`.`curso` (`curso_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_registro_asistencias_estudiante_id_idx` ON `infinite_knowledge`.`registro_asistencias` (`estudiante_id` ASC);

CREATE INDEX `fk_registro_asistencias_salon_clases_id_idx` ON `infinite_knowledge`.`registro_asistencias` (`salon_clases_id` ASC);

CREATE INDEX `fk_registro_asistencias_curso_id_idx` ON `infinite_knowledge`.`registro_asistencias` (`curso_id` ASC);


-- -----------------------------------------------------
-- Table `infinite_knowledge`.`usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`usuario` (
  `usuario_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `dni` CHAR(8) NOT NULL,
  `correo_electronico` VARCHAR(100) NOT NULL,
  `contrasenia` VARCHAR(50) NOT NULL,
  `rol` TINYINT UNSIGNED NOT NULL,
  PRIMARY KEY (`usuario_id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idx_usuario_correo_electronico` ON `infinite_knowledge`.`usuario` (`correo_electronico` ASC);


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
